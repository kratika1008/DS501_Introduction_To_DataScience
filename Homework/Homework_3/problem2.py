from mrjob.job import MRJob
#-------------------------------------------------------------------------
'''
    Problem 2:
    In this problem, you will use mapreduce framework to implement matrix multiplication.

    Matrix Dataset:
    Suppose we have a dataset of two matrics A and B (matrix.csv), each line represents an element in matrix A or matrix B.
    For example, to represent a (2X3) matrix A = 1,2,3
                                                 4,5,6
        and a (3X2) matrix B = 1,-1
                               1,-1
                               1,-1
        We want to compute the matrix C = A X B (matrix multiplication)

        C =  6, -6
            15, -15

        We will have the following input file:

        Matrix, Row_index, Column_index, Value, num_rows, num_columns
        -------------------------------------------------------------
          A   ,    1     ,      1      ,   1  ,   2     ,     2
          A   ,    1     ,      2      ,   2  ,   2     ,     2
          A   ,    1     ,      3      ,   3  ,   2     ,     2
          A   ,    2     ,      1      ,   4  ,   2     ,     2
          A   ,    2     ,      2      ,   5  ,   2     ,     2
          A   ,    2     ,      3      ,   6  ,   2     ,     2
          B   ,    1     ,      1      ,   1  ,   2     ,     2
          B   ,    1     ,      2      ,  -1  ,   2     ,     2
          B   ,    2     ,      1      ,   1  ,   2     ,     2
          B   ,    2     ,      2      ,  -1  ,   2     ,     2
          B   ,    2     ,      1      ,   1  ,   2     ,     2
          B   ,    2     ,      2      ,  -1  ,   2     ,     2

    Here num_rows (num_column) represents the number of rows (columns) in matrix C.

'''

#--------------------------
class MatMul(MRJob):
#--------------------------
    '''
        Given a matrix A and a matrix B, compute the product A*B = C (matrix multiplication)
    '''

    #----------------------
    def mapper(self, in_key, in_value):
        '''
            mapper function, which process a key-value pair in the data and generate intermediate key-value pair(s)
            Input:
                    in_key: the key of a data record (in this example, can be ignored)
                    in_value: the value of a data record, (in this example, it is a line of text string in the data file, check 'matrix.csv' for example)
            Yield:
                    (out_key, out_value) :intermediate key-value pair(s). You need to design the format and meaning of the key-value pairs. These intermediate key-value pairs will be feed to reducers, after grouping all the values with a same key into a value list.
        '''

        #########################################
        ## INSERT YOUR CODE HERE

        # process input value
        matVal = in_value.split(',')
        num_rows=0
        num_cols=0
        current_row=0
        current_col=0

        if matVal[0]=='A':
            num_cols = int(matVal[5])
            current_row = matVal[1]
        if matVal[0]=='B':
            num_rows = int(matVal[4])
            current_col = matVal[2]
        # generate output key-value pairs
        if current_row!=0:
            for i in range(num_cols):
                key=[]
                key.append('C')
                key.append(int(current_row))
                key.append(i+1)
                yield key,in_value
        if current_col!=0:
            for i in range(num_rows):
                key=[]
                key.append('C')
                key.append(i+1)
                key.append(int(current_col))
                yield key,in_value

        #yield key, value





        #########################################


    #----------------------
    def reducer(self, in_key, in_values):
        '''
            reducer function, which processes a key and value list and produces output key-value pair(s)
            Input:
                    in_key: an intermediate key from the mapper
                    in_values: a list (generator) of values , which contains all the intermediate values with the same key (in_key) generated by all mappers
            Yield:
                    (out_key, out_value) : output key-value pair(s).
        '''
        #########################################
        ## INSERT YOUR CODE HERE
        elements_A = dict()
        elements_B = dict()
        elements_C=0
        for eachVal in in_values:
            valArray = eachVal.split(',')
            if valArray[0]=='A':
                elements_A[int(valArray[2])] = float(valArray[3])
            if valArray[0]=='B':
                elements_B[int(valArray[1])] = float(valArray[3])

        n = len(elements_A)
        for i in range(n):
            elements_C += (elements_A.get(i+1)*elements_B.get(i+1))

        yield in_key,elements_C



        #########################################




#--------------------------------------------

''' TEST Problem 2:
        Now you can test the correctness of all the above functions by typing `nosetests -v test2.py' in the terminal.

        If your code passed all the tests, you will see the following message in the terminal:
            ----------- Problem 2 (15 points in total)-------------- ... ok
            (3 points) MatMul1x1 ... ok
            (3 points) MatMul1x2 ... ok
            (3 points) MatMul2x1 ... ok
            (3 points) MatMul2x2 ... ok
            (3 points) MatMul random ... ok
            ----------------------------------------------------------------------
            Ran 5 tests in 0.103s
            OK

'''

#--------------------------------------------
